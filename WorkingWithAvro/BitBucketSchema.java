/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package WorkingWithAvro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BitBucketSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BitBucketSchema\",\"namespace\":\"WorkingWithAvro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"emailAddress\",\"type\":\"string\"},{\"name\":\"authorTimestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence emailAddress;
  @Deprecated public java.lang.CharSequence authorTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public BitBucketSchema() {}

  /**
   * All-args constructor.
   */
  public BitBucketSchema(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence emailAddress, java.lang.CharSequence authorTimestamp) {
    this.id = id;
    this.name = name;
    this.emailAddress = emailAddress;
    this.authorTimestamp = authorTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return emailAddress;
    case 3: return authorTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: emailAddress = (java.lang.CharSequence)value$; break;
    case 3: authorTimestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'emailAddress' field.
   */
  public java.lang.CharSequence getEmailAddress() {
    return emailAddress;
  }

  /**
   * Sets the value of the 'emailAddress' field.
   * @param value the value to set.
   */
  public void setEmailAddress(java.lang.CharSequence value) {
    this.emailAddress = value;
  }

  /**
   * Gets the value of the 'authorTimestamp' field.
   */
  public java.lang.CharSequence getAuthorTimestamp() {
    return authorTimestamp;
  }

  /**
   * Sets the value of the 'authorTimestamp' field.
   * @param value the value to set.
   */
  public void setAuthorTimestamp(java.lang.CharSequence value) {
    this.authorTimestamp = value;
  }

  /** Creates a new BitBucketSchema RecordBuilder */
  public static WorkingWithAvro.BitBucketSchema.Builder newBuilder() {
    return new WorkingWithAvro.BitBucketSchema.Builder();
  }
  
  /** Creates a new BitBucketSchema RecordBuilder by copying an existing Builder */
  public static WorkingWithAvro.BitBucketSchema.Builder newBuilder(WorkingWithAvro.BitBucketSchema.Builder other) {
    return new WorkingWithAvro.BitBucketSchema.Builder(other);
  }
  
  /** Creates a new BitBucketSchema RecordBuilder by copying an existing BitBucketSchema instance */
  public static WorkingWithAvro.BitBucketSchema.Builder newBuilder(WorkingWithAvro.BitBucketSchema other) {
    return new WorkingWithAvro.BitBucketSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for BitBucketSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BitBucketSchema>
    implements org.apache.avro.data.RecordBuilder<BitBucketSchema> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence emailAddress;
    private java.lang.CharSequence authorTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(WorkingWithAvro.BitBucketSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(WorkingWithAvro.BitBucketSchema.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[2].schema(), other.emailAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.authorTimestamp)) {
        this.authorTimestamp = data().deepCopy(fields()[3].schema(), other.authorTimestamp);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing BitBucketSchema instance */
    private Builder(WorkingWithAvro.BitBucketSchema other) {
            super(WorkingWithAvro.BitBucketSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.emailAddress)) {
        this.emailAddress = data().deepCopy(fields()[2].schema(), other.emailAddress);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.authorTimestamp)) {
        this.authorTimestamp = data().deepCopy(fields()[3].schema(), other.authorTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public WorkingWithAvro.BitBucketSchema.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public WorkingWithAvro.BitBucketSchema.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public WorkingWithAvro.BitBucketSchema.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public WorkingWithAvro.BitBucketSchema.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'emailAddress' field */
    public java.lang.CharSequence getEmailAddress() {
      return emailAddress;
    }
    
    /** Sets the value of the 'emailAddress' field */
    public WorkingWithAvro.BitBucketSchema.Builder setEmailAddress(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.emailAddress = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'emailAddress' field has been set */
    public boolean hasEmailAddress() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'emailAddress' field */
    public WorkingWithAvro.BitBucketSchema.Builder clearEmailAddress() {
      emailAddress = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'authorTimestamp' field */
    public java.lang.CharSequence getAuthorTimestamp() {
      return authorTimestamp;
    }
    
    /** Sets the value of the 'authorTimestamp' field */
    public WorkingWithAvro.BitBucketSchema.Builder setAuthorTimestamp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.authorTimestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'authorTimestamp' field has been set */
    public boolean hasAuthorTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'authorTimestamp' field */
    public WorkingWithAvro.BitBucketSchema.Builder clearAuthorTimestamp() {
      authorTimestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BitBucketSchema build() {
      try {
        BitBucketSchema record = new BitBucketSchema();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.emailAddress = fieldSetFlags()[2] ? this.emailAddress : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.authorTimestamp = fieldSetFlags()[3] ? this.authorTimestamp : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
